package com.skilldistillery.armadasite.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.skilldistillery.armadasite.entities.ListBuild;
import com.skilldistillery.armadasite.repositories.ListBuildRepository;

@Service
public class ListBuildServiceImpl implements ListBuildService {

	@Autowired
	private ListBuildRepository listRepo;

	@Override
	public ListBuild createList(ListBuild list) {
		ListBuild result = null;
		try {
			result = listRepo.saveAndFlush(list);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	@Override
	public ListBuild updateList(ListBuild list) {
		ListBuild toUpdate = null;

		Optional<ListBuild> toUpdateTemp = listRepo.findById(list.getId());
		if (toUpdateTemp.isPresent()) {
			toUpdate = toUpdateTemp.get();

			toUpdate.setActualCost(list.getActualCost());
			toUpdate.setPointSway(list.getPointSway());

			if (list.getFighters() != null && list.getFighters().size() > 0) {
				toUpdate.setFighters(list.getFighters());
			}

			if (list.getShipBuilds() != null && list.getShipBuilds().size() > 0) {
				toUpdate.setShipBuilds(list.getShipBuilds());
			}

			if (list.getDesiredCost() > 0) {
				toUpdate.setDesiredCost(list.getDesiredCost());
			}

			if (list.getName() != null) {
				toUpdate.setName(list.getName());
			}

		}
		
		listRepo.saveAndFlush(toUpdate);
		return toUpdate;
	}

	@Override
	public void deleteList(ListBuild list) {
		// TODO Auto-generated method stub

	}

	@Override
	public List<ListBuild> getAllLists() {
		return listRepo.findAll();
	}

	@Override
	public List<ListBuild> getAllListsByUser(int userId) {
		return listRepo.findByUsersId(userId);
	}

	@Override
	public ListBuild getSingleListByUser(int listId, int userId) {
		List<ListBuild> lists = listRepo.findByUsersId(userId);
		ListBuild result = null;

		for (ListBuild listBuild : lists) {
			if (listBuild.getId() == listId) {
				result = listBuild;
				break;
			}
		}

		return result;
	}

	@Override
	public ListBuild getListById(int id) {
		ListBuild result = null;

		Optional<ListBuild> temp = listRepo.findById(id);

		if (temp.isPresent()) {
			result = temp.get();
		}

		return result;
	}

}
